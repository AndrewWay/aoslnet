{
  "name": "stl-reader",
  "version": "3.0.1",
  "description": "Library for parsing STL (Stereolithography) files into typed arrays for WebGL rendering",
  "main": "stl-reader.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/tatx/stl-reader.git"
  },
  "keywords": [
    "stl",
    "parser",
    "reader",
    "stereolithography"
  ],
  "author": {
    "name": "Tathagata Chakraborty",
    "email": "tatx@me.com",
    "url": "https://github.com/tatx"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/tatx/stl-reader/issues"
  },
  "homepage": "https://github.com/tatx/stl-reader",
  "devDependencies": {
    "chai": "^2.3.0",
    "grunt": "^0.4.5",
    "grunt-contrib-jshint": "^0.11.2",
    "grunt-mocha-cli": "^1.13.0",
    "jasmine-core": "^2.3.4",
    "karma": "^0.12.32",
    "karma-chrome-launcher": "^0.1.12",
    "karma-firefox-launcher": "^0.1.6",
    "karma-jasmine": "^0.3.5",
    "mocha": "^2.2.5"
  },
  "readme": "# StlReader\n\n[![License](https://img.shields.io/badge/license-MIT-yellowgreen.svg)](http://opensource.org/licenses/MIT)\n\nJavaScript library for parsing STL (Stereolithography) files into interleaved\nvertex normal Float32Arrays that can be directly passed into WebGL or used with\na library like [three.js](http://threejs.org/) for rendering.\n\n## Server-side\n\n### Installation\n\n```\nnpm install stl-reader\n```\n\n### Usage\n\n```JavaScript\nvar fs = require('fs');\nvar StlReader = require('stl-reader');\n...\nfs.readFile('test/cube.stl', function (err, data) {\n  var res = StlReader.read(toArrayBuffer(data));\n\n  console.log(res.vn);\n  console.log(res.vertices);\n  console.log(res.normals);\n});\n```\n\nThe returned *res* object contains three properties - 'vn', 'vertices' and\n'normals'. *vn* is a Float32Array that contains interleaved vertex\nnormal data, like so, [Vx, Vy, Vz, Nx, Ny, Nz, ...] and so on. This is ideal\nfor directly passing to a vertex shader. The *vertices* and *normals* arrays\ncontain the vertices and normals separately. These can be used with a library\nlike [three.js](http://threejs.org/) for rendering.\n\nThe *read* function takes as input an ArrayBuffer. You can use the function\nbelow to convert a Node Buffer to an ArrayBuffer (see discussion regarding this\ncode snippet [here](http://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer)).\n\n```JavaScript\nfunction toArrayBuffer(buffer) {\n  var ab = new ArrayBuffer(buffer.length);\n  var view = new Uint8Array(ab);\n  for (var i = 0; i < buffer.length; ++i) {\n    view[i] = buffer[i];\n  }\n  return ab;\n}\n```\n\nThis library depends on the [DataStream.js](https://github.com/kig/DataStream.js)\nlibrary to read binary STL files. A version of the DataStream.js library is\ninstalled automatically as a dependency when this library is installed\nserver-side using npm.\n\n## Client-side\n\n### Installation\n\n```\nbower install stl-reader\n```\n\n### Usage\n\nThis library depends on the DataStream.js library to read binary STL files. You\ntherefore will also need to install the DataStream.js library from\n[here](https://github.com/kig/DataStream.js). After installation include these\nJavaScript files before including the stl-reader related scripts:\n\n```HTML\n<script type=\"text/javascript\" src=\"/bower_components/DataStream.js/encoding-indexes.js\"></script>\n<script type=\"text/javascript\" src=\"/bower_components/DataStream.js/encoding.js\"></script>\n<script type=\"text/javascript\" src=\"/bower_components/DataStream.js/DataStream.js\"></script>\n```\n\nInclude these three JavaScript files on the page:\n\n```HTML\n<script src=\"/bower_components/stl-reader/stl-ascii-reader.js\" type=\"text/javascript\"></script>\n<script src=\"/bower_components/stl-reader/stl-binary-reader.js\" type=\"text/javascript\"></script>\n<script src=\"/bower_components/stl-reader/stl-reader.js\" type=\"text/javascript\"></script>\n```\n\nUse an instance of the FileReader class to read the local file as an ArrayBuffer.\n\n```Javascript\nvar reader = new FileReader();\n\nreader.onload = function () {\n  var stlReader, data;\n\n  data = reader.result;\n  stlReader = new StlReader();\n  var res = stlReader.read(data);\n\n  console.log(res.vn);\n  console.log(res.vertices);\n  console.log(res.normals);\n};\n\nreader.readAsArrayBuffer(fileData);\n```\n\nThe returned *res* object contains three properties - 'vn', 'vertices' and\n'normals'. *vn* is a Float32Array that contains interleaved vertex\nnormal data, like so, [Vx, Vy, Vz, Nx, Ny, Nz, ...] and so on. This is ideal\nfor directly passing to a vertex shader. The *vertices* and *normals* arrays\ncontain the vertices and normals separately. These can be used with a library\nlike [three.js](http://threejs.org/) for rendering:\n\n\n```Javascript\nvar res = StlReader.read(data);\n\nvar geometry = new THREE.BufferGeometry();\ngeometry.addAttribute('position', new THREE.BufferAttribute(res.vertices, 3));\ngeometry.addAttribute('normal', new THREE.BufferAttribute(res.normals, 3));\nmesh = new THREE.Mesh(geometry, material);\n\nscene.add(mesh);\n```\n\nwhere, *material* is the material you want to render the mesh with and *scene*\nis the three.js scene object to which you want to add the mesh.\n",
  "readmeFilename": "README.md",
  "_id": "stl-reader@3.0.1",
  "_from": "stl-reader@"
}
